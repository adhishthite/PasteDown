---
description: Apply these rules when creating the project
globs:
alwaysApply: true
---
## Project Overview

*   **Type:** cursor_project_rules
*   **Description:** Markdown PasteBin - MVP Specification The Markdown PasteBin is a simple, free-for-all public service where users can paste and share Markdown content via a unique URL. Once submitted, the paste is locked and cannot be edited. Pastes auto-expire after a configurable period (default: 3 days). It features a distraction-free Markdown editor with live preview, unique URL generation using nanoid, and secure storage in MongoDB Atlas. The MVP includes rate limiting and automatic deletion via TTL indexing.
*   **Primary Goal:** To address the limitations of existing paste services by delivering a robust Markdown editing and previewing experience that ensures secure, temporary storage of content, with a minimal, distraction-free UI and seamless shareability.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   [Next.js 14]: Enforce the use of the App Router. Structure routes using the `app/[route]/page.tsx` conventions.
    *   Example 1: "Next.js 14 (App Router)" → `app/[route]/page.tsx` conventions
    *   Example 2: "Next.js (Pages Router)" → `pages/[route].tsx` pattern (not applicable for this project)
    *   Example 3: "React Router 6" → `src/routes/` with `createBrowserRouter` (if ever applicable)

### Core Directories

*   **Versioned Structure:**

    *   [app]: For Next.js 14, contains the full application including API routes, global layouts, and page components.
    *   Example 1: `app/api` → "Next.js 14 API routes with Route Handlers for paste creation and retrieval"
    *   Example 2: `src/views` → "(Example for Vue 3, not used in this project)"

### Key Files

*   **Stack-Versioned Patterns:**

    *   [file]: Specific files follow version-specific conventions.
    *   Example 1: `app/dashboard/layout.tsx` → "Next.js 14 root layouts (adapt for main layout if needed)"
    *   Example 2: `pages/_app.js` → "Next.js Pages Router customization (not applicable here as we enforce App Router)"

## Tech Stack Rules

*   **Version Enforcement:**

    *   [next@14]: Enforce the use of the App Router. Do not use `getInitialProps`.
    *   [express@latest]: Follow modular middleware patterns ensuring clear separation of concerns and robust error handling.

## PRD Compliance

*   **Non-Negotiable:**

    *   "Once submitted, the paste is locked and cannot be edited." → The paste, once finalized, must remain immutable.
    *   "Pastes auto-expire after a configurable period (default: 3 days)." → Must implement MongoDB TTL indexing to ensure auto-deletion at the 3-day mark.
    *   "Rate limiting of 5 requests per hour per IP." → Strictly enforce this rule in the backend.

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   Example: "Next.js 14 Paste Submission Flow" → `app/api/paste/route.ts` processes paste creation. The front-end uses `app/page.tsx` for the editor and preview. After submission, generate a unique URL (e.g., `app/[pasteId]/page.tsx`) for viewing the paste.

## Best Practices

*   **Next.js**

    *   Use the App Router for file-based routing and component nesting.
    *   Implement dynamic routing for unique paste IDs.
    *   Maintain strict separation between client and server components.

*   **Tailwind CSS**

    *   Utilize utility-first classes for consistent styling.
    *   Follow pre-defined design tokens to maintain a minimal and clean aesthetic.
    *   Optimize for responsiveness across devices.

*   **Typescript**

    *   Enforce strict type-checking to catch errors at compile time.
    *   Define interfaces and types for component props and API responses.
    *   Maintain well-documented code with inline comments where necessary.

*   **Shadcn UI**

    *   Follow component composition practices to build reusable UI components.
    *   Ensure accessibility standards are met in all components.
    *   Leverage customization options to align with the project’s clean aesthetic.

*   **Express.js**

    *   Use a modular middleware approach for scalable API route management.
    *   Implement robust error handling and input validations.
    *   Structure routes clearly to map with front-end API calls.

*   **MongoDB Atlas**

    *   Follow best practices for schema design using Mongoose.
    *   Ensure indexes, especially TTL, are properly configured and monitored.
    *   Regularly backup data and monitor performance metrics.

*   **Mongoose**

    *   Validate data schemas to ensure integrity.
    *   Optimize queries and lean on projection where necessary.
    *   Use middleware for hooks like pre-save for any additional processing.

*   **nanoid**

    *   Use as the primary method for generating unique, URL-friendly IDs.
    *   Ensure collision resistance by configuring size appropriately.
    *   Integrate securely with the backend paste creation flow.

*   **react-markdown**

    *   Use safe parsing options to prevent code injection.
    *   Optimize rendering performance for live preview functionality.
    *   Keep dependencies updated for security and performance improvements.

*   **Vercel**

    *   Leverage native analytics and logging features to monitor performance.
    *   Follow best deployment practices recommended by Vercel.
    *   Optimize build configurations for rapid deployment cycles.

## Rules

*   Derive folder/file patterns directly from tech stack documentation versions. For instance, using the Next.js 14 App Router means using the `app/` directory exclusively.
*   If Next.js 14 App Router: Enforce the use of the `app/` directory with nested route folders for clear organization.
*   If using Pages Router (not applicable here): Use a flat `pages/*.tsx` structure.
*   Mirror this logic for other tech stacks such as React Router, SvelteKit, etc. Do not mix version patterns (e.g., avoid using `pages/` in App Router projects).
*   Strictly adhere to rate-limiting rules as defined in the PRD, ensuring that each IP is limited to 5 requests per hour.
*   Ensure that custom error pages are displayed for pastes that are either expired or invalid, as per the project requirements.
*   Integrate analytics and logging within the deployment platforms (Vercel for frontend, Fly.io/Railway.app for backend) to maintain visibility on usage patterns and potential issues.
*   Maintain the integrity of the Markdown PasteBin MVP by ensuring that once a paste is submitted, it becomes immutable and auto-deletes after the specified period.
